import React, { useState, useEffect } from 'react';
import { db, auth } from '../../../firebase';
import { collection, doc, getDoc, getDocs } from 'firebase/firestore';
import { onAuthStateChanged } from 'firebase/auth';
import './savedJobs.css';
// ‚ö†Ô∏è Gi·∫£ s·ª≠ ƒë∆∞·ªùng d·∫´n n√†y l√† ƒë√∫ng ƒë·∫øn component JobList v√† JobDetailModal c·ªßa b·∫°n
import JobList from '../jobList/JobList';
import JobDetailModal from '../jobList/JobDetailModal';

function SavedJobPage() {
    // --- STATE & HOOKS (GI·ªÆ NGUY√äN) ---
    const [currentUser, setCurrentUser] = useState(null);
    const [savedJobs, setSavedJobs] = useState([]);
    const [companyData, setCompanyData] = useState({});
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [selectedJob, setSelectedJob] = useState(null);

    // B∆∞·ªõc 1: X√°c ƒë·ªãnh ng∆∞·ªùi d√πng hi·ªán t·∫°i (Logic gi·ªØ nguy√™n)
    useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, (user) => {
            setCurrentUser(user);
            if (user !== undefined) setLoading(false);
            if (!user) {
                setError('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem c√¥ng vi·ªác ƒë√£ l∆∞u c·ªßa b·∫°n.');
            } else {
                setError(null);
            }
        });
        return () => unsubscribe();
    }, []);

    // B∆∞·ªõc 2 & 3: Truy v·∫•n danh s√°ch Job ƒë√£ l∆∞u v√† l·∫•y th√¥ng tin chi ti·∫øt t·ª´ng Job (Logic gi·ªØ nguy√™n)
    useEffect(() => {
        const fetchSavedJobs = async () => {
            if (!currentUser) {
                setSavedJobs([]);
                setLoading(false);
                return;
            }

            setLoading(true);
            setError(null);

            try {
                const savedJobsRef = collection(db, 'candidates', currentUser.uid, 'savedJobs');
                const savedJobsSnapshot = await getDocs(savedJobsRef);

                const jobIds = [];
                savedJobsSnapshot.forEach((doc) => {
                    jobIds.push(doc.id);
                });

                if (jobIds.length === 0) {
                    setSavedJobs([]);
                    setLoading(false);
                    return;
                }

                const jobDetailsPromises = jobIds.map(async (jobId) => {
                    const jobDocRef = doc(db, 'jobs', jobId);
                    const jobDocSnap = await getDoc(jobDocRef);
                    if (jobDocSnap.exists()) {
                        return { id: jobDocSnap.id, ...jobDocSnap.data() };
                    }
                    return null;
                });

                const fetchedJobDetails = await Promise.all(jobDetailsPromises);
                const validJobs = fetchedJobDetails.filter(job => job !== null);
                setSavedJobs(validJobs);
            } catch (err) {
                console.error("L·ªói khi t·∫£i c√¥ng vi·ªác ƒë√£ l∆∞u:", err);
                setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch c√¥ng vi·ªác ƒë√£ l∆∞u. Vui l√≤ng th·ª≠ l·∫°i.');
            } finally {
                setLoading(false);
            }
        };

        if (currentUser) {
            fetchSavedJobs();
        } else if (currentUser === null && !loading) {
            setSavedJobs([]);
        }
    }, [currentUser]);

    // L·∫•y th√¥ng tin c√¥ng ty cho c√°c job ƒë√£ l∆∞u (Logic gi·ªØ nguy√™n)
    useEffect(() => {
        const fetchCompanies = async () => {
            if (savedJobs.length === 0) return;
            const companyMap = {};

            const companyIds = [...new Set(savedJobs.map(job => job.companyId))].filter(id => id);

            await Promise.all(companyIds.map(async (companyId) => {
                try {
                    const companyRef = doc(db, "companies", companyId);
                    const companySnap = await getDoc(companyRef);
                    if (companySnap.exists()) {
                        companyMap[companyId] = companySnap.data();
                    }
                } catch (err) {
                    console.error("‚ùå Error fetching company:", err);
                }
            }));

            setCompanyData(companyMap);
        };

        if (savedJobs.length > 0) fetchCompanies();
    }, [savedJobs]);


    // --- HANDLERS (GI·ªÆ NGUY√äN) ---

    const handleJobClick = (job) => {
        const company = companyData[job.companyId] || {};
        setSelectedJob({ job, company });
    };

    const handleCloseModal = () => {
        setSelectedJob(null);
    };

    // --- RENDER FUNCTIONS (B·ªê C·ª§C M·ªöI) ---

    const renderLoadingState = () => (
        <div className='status-container'>
            <div className="loading-spinner"></div>
            <p className="status-message">ƒêang t·∫£i c√¥ng vi·ªác ƒë√£ l∆∞u... ‚è≥</p>
        </div>
    );

    const renderErrorState = (message) => (
        <div className='status-container'>
            <p className="error-message">‚ùå {message}</p>
        </div>
    );
    
    const renderEmptyState = () => (
        <div className='status-container empty-state'>
            <span className="empty-icon"></span>
            <p className="status-message">B·∫°n ch∆∞a l∆∞u c√¥ng vi·ªác n√†o.</p>
            <p className="suggestion-message">H√£y kh√°m ph√° v√† l∆∞u nh·ªØng c√¥ng vi·ªác b·∫°n y√™u th√≠ch! ‚ú®</p>
            {/* Th√™m n√∫t ho·∫∑c link chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang t√¨m ki·∫øm n·∫øu c·∫ßn */}
            {/* <button className="primary-btn">Kh√°m ph√° ngay</button> */}
        </div>
    );
    
    // --- MAIN RENDER LOGIC ---

    if (loading) {
        return (
            <div className='saved-job-page'>
                <h1>C√¥ng vi·ªác ƒë√£ l∆∞u c·ªßa t√¥i</h1>
                {renderLoadingState()}
            </div>
        );
    }

    if (error) {
        return (
            <div className='saved-job-page'>
                <h1>C√¥ng vi·ªác ƒë√£ l∆∞u c·ªßa t√¥i</h1>
                {renderErrorState(error)}
            </div>
        );
    }
    
    // N·∫øu kh√¥ng ƒëƒÉng nh·∫≠p (currentUser l√† null sau khi loading xong)
    if (!currentUser) {
         // Hi·ªÉn th·ªã th√¥ng b√°o ƒëƒÉng nh·∫≠p ngay trong ph·∫ßn error render
        return (
            <div className='saved-job-page'>
                <h1>Saved Jobs</h1>
                {renderErrorState('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem c√¥ng vi·ªác ƒë√£ l∆∞u c·ªßa b·∫°n. üîí')}
            </div>
        );
    }

    if (savedJobs.length === 0) {
        return (
            <div className='saved-job-page'>
                <h1>Saved jobs</h1>
                {renderEmptyState()}
            </div>
        );
    }

    // T·∫°o danh s√°ch job ƒë√£ ƒë∆∞·ª£c g·∫Øn k√®m companyData cho JobList (Logic gi·ªØ nguy√™n)
    const jobsWithCompany = savedJobs.map(job => ({
        ...job,
        company: companyData[job.companyId] || {}
    }));

    // B·ªë c·ª•c ch√≠nh
    return (
        <div className='saved-job-page'>
            <h1>Saved Jobs</h1>

            {/* Container cho danh s√°ch c√¥ng vi·ªác */}
            <div className="job-list-container">
                <JobList
                    jobs={jobsWithCompany}
                    onJobClick={handleJobClick}
                    companyData={companyData}
                    setSelectedJob={setSelectedJob}
                />
            </div>

            {/* Modal Chi ti·∫øt C√¥ng vi·ªác */}
            {selectedJob && (
                <JobDetailModal
                    job={selectedJob.job}
                    company={selectedJob.company}
                    onClose={handleCloseModal}
                />
            )}
        </div>
    );
}

export default SavedJobPage;