import { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { auth, db } from "../../../firebase";
import {
  doc,
  getDoc,
  collection,
  query,
  where,
  getDocs,
  updateDoc,
} from "firebase/firestore";
import "./jobdetail.css";

export default function JobDetail() {
  const { jobId } = useParams();
  const navigate = useNavigate();
  const [job, setJob] = useState(null);
  const [candidates, setCandidates] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedCandidate, setSelectedCandidate] = useState(null);

  /* ============================================================
     üîπ L·∫•y th√¥ng tin c√¥ng vi·ªác
  ============================================================ */
  useEffect(() => {
    const fetchJob = async () => {
      try {
        const jobRef = doc(db, "jobs", jobId);
        const jobSnap = await getDoc(jobRef);

        if (jobSnap.exists()) {
          setJob({ id: jobSnap.id, ...jobSnap.data() });
        } else {
          alert("Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác n√†y.");
          navigate("/company/home/jobs");
        }
      } catch (err) {
        console.error("Error fetching job:", err);
      }
    };

    fetchJob();
  }, [jobId, navigate]);

  /* ============================================================
     üîπ L·∫•y danh s√°ch ·ª©ng vi√™n ·ª©ng tuy·ªÉn job n√†y
  ============================================================ */
  useEffect(() => {
    const fetchCandidates = async () => {
      try {
        const user = auth.currentUser;
        if (!user) return;

        const companyId = user.uid;
        const q = query(
          collection(db, "applications"),
          where("companyId", "==", companyId),
          where("jobId", "==", jobId)
        );

        const snapshot = await getDocs(q);
        const apps = snapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));

        setCandidates(apps);
      } catch (err) {
        console.error("Error fetching candidates:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchCandidates();
  }, [jobId]);

  /* ============================================================
     üîπ C·∫≠p nh·∫≠t tr·∫°ng th√°i ·ª©ng vi√™n
  ============================================================ */
  const handleStatusChange = async (appId, newStatus) => {
    try {
      const ref = doc(db, "applications", appId);
      await updateDoc(ref, { status: newStatus });

      setCandidates((prev) =>
        prev.map((app) =>
          app.id === appId ? { ...app, status: newStatus } : app
        )
      );
    } catch (err) {
      console.error("Error updating status:", err);
    }
  };

  if (loading) return <p className="jobdetail-loading">ƒêang t·∫£i d·ªØ li·ªáu...</p>;
  if (!job) return <p className="jobdetail-notfound">Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác.</p>;

  /* ============================================================
     üîπ Giao di·ªán ch√≠nh
  ============================================================ */
  return (
    <div className="jobdetail-container">
      <button className="btn-back" onClick={() => navigate(-1)}>
        ‚Üê Quay l·∫°i
      </button>

      {/* ===== TH√îNG TIN C√îNG VI·ªÜC ===== */}
      <section className="jobdetail-section">
        <h2>{job.title}</h2>
        <p><strong>M·ª©c l∆∞∆°ng:</strong> {job.salaryRange || "Th∆∞∆°ng l∆∞·ª£ng"}</p>
        <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> {job.location || "‚Äî"}</p>
        <p><strong>Kinh nghi·ªám:</strong> {job.experience || "Kh√¥ng y√™u c·∫ßu"}</p>
        <p><strong>M√¥ t·∫£:</strong> {job.description}</p>
      </section>

      {/* ===== DANH S√ÅCH ·ª®NG VI√äN ===== */}
      <section className="jobdetail-section">
        <h3>Danh s√°ch ·ª©ng vi√™n ({candidates.length})</h3>

        {candidates.length === 0 ? (
          <p className="no-candidates">Ch∆∞a c√≥ ai ·ª©ng tuy·ªÉn c√¥ng vi·ªác n√†y.</p>
        ) : (
          <table className="candidate-table">
            <thead>
              <tr>
                <th>T√™n</th>
                <th>Email</th>
                <th>Ng√†y n·ªôp</th>
                <th>Tr·∫°ng th√°i</th>
                <th>CV</th>
                <th>Chi ti·∫øt</th>
                <th>H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {candidates.map((c) => (
                <tr key={c.id}>
                  <td>{c.candidateName}</td>
                  <td>{c.candidateEmail}</td>
                  <td>
                    {c.appliedAt && c.appliedAt.toDate
                      ? c.appliedAt.toDate().toLocaleString("vi-VN")
                      : "‚Äî"}
                  </td>
                  <td>
                    <span className={`status-badge ${c.status.toLowerCase()}`}>
                      {c.status}
                    </span>
                  </td>
                  <td>
                    {c.cvUrl ? (
                      <a
                        href={c.cvUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="cv-link"
                      >
                        Xem CV
                      </a>
                    ) : (
                      "‚Äî"
                    )}
                  </td>
                  <td>
                    <button
                      className="btn-view"
                      onClick={() => setSelectedCandidate(c)}
                    >
                      Xem
                    </button>
                  </td>
                  <td>
                    <select
                      value={c.status}
                      onChange={(e) =>
                        handleStatusChange(c.id, e.target.value)
                      }
                    >
                      <option value="Pending">Pending</option>
                      <option value="Reviewed">Reviewed</option>
                      <option value="Accepted">Accepted</option>
                      <option value="Rejected">Rejected</option>
                    </select>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </section>

      {/* ===== MODAL XEM ·ª®NG VI√äN ===== */}
      {selectedCandidate && (
        <CandidateModal
          candidate={selectedCandidate}
          onClose={() => setSelectedCandidate(null)}
        />
      )}
    </div>
  );
}

/* ============================================================
   üîπ COMPONENT PH·ª§: Modal Xem Chi Ti·∫øt ·ª®ng Vi√™n
============================================================ */
function CandidateModal({ candidate, onClose }) {
  return (
    <div className="modal-backdrop">
      <div className="modal-content">
        <button className="modal-close-btn" onClick={onClose}>
          &times;
        </button>
        <h3>Chi ti·∫øt ·ª©ng vi√™n</h3>
        <p><strong>H·ªç t√™n:</strong> {candidate.candidateName}</p>
        <p><strong>Email:</strong> {candidate.candidateEmail}</p>
        <p><strong>Ng√†y ·ª©ng tuy·ªÉn:</strong>{" "}
          {candidate.appliedAt && candidate.appliedAt.toDate
            ? candidate.appliedAt.toDate().toLocaleString("vi-VN")
            : "‚Äî"}
        </p>
        <p><strong>Tr·∫°ng th√°i:</strong> {candidate.status}</p>
        <p><strong>Th∆∞ gi·ªõi thi·ªáu:</strong> {candidate.coverLetter || "‚Äî"}</p>
        <p>
          <strong>CV:</strong>{" "}
          {candidate.cvUrl ? (
            <a
              href={candidate.cvUrl}
              target="_blank"
              rel="noopener noreferrer"
              className="cv-link"
            >
              M·ªü CV
            </a>
          ) : (
            "Kh√¥ng c√≥"
          )}
        </p>
      </div>
    </div>
  );
}
