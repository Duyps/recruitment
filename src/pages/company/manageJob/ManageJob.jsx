import { useEffect, useState, useCallback } from "react";
import { auth, db } from "../../../firebase";
import {
  collection,
  query,
  where,
  getDocs,
  deleteDoc,
  doc,
  updateDoc,
} from "firebase/firestore";
import {
  FiEdit,
  FiTrash2,
  FiToggleLeft,
  FiToggleRight,
  FiUsers,
} from "react-icons/fi";
import { useNavigate } from "react-router-dom";
import "./managejob.css";

/* ===========================================================
   üîπ H√ÄM H·ªñ TR·ª¢: ƒê·∫øm s·ªë l∆∞·ª£ng ·ª©ng vi√™n cho danh s√°ch job
   =========================================================== */
const fetchApplicationsCount = async (jobIds, companyId) => {
  if (jobIds.length === 0) return {};

  const batchSize = 10; // Firestore gi·ªõi h·∫°n 10 ph·∫ßn t·ª≠ trong m·ªánh ƒë·ªÅ "in"
  const applicationCounts = {};

  for (let i = 0; i < jobIds.length; i += batchSize) {
    const batchJobIds = jobIds.slice(i, i + batchSize);

    const q = query(
      collection(db, "applications"),
      where("companyId", "==", companyId),
      where("jobId", "in", batchJobIds)
    );

    const querySnapshot = await getDocs(q);
    querySnapshot.docs.forEach((docSnap) => {
      const jobId = docSnap.data().jobId;
      applicationCounts[jobId] = (applicationCounts[jobId] || 0) + 1;
    });
  }

  return applicationCounts;
};

/* ===========================================================
   üîπ COMPONENT CH√çNH: ManageJob
   =========================================================== */
export default function ManageJob() {
  const [jobs, setJobs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState("all");
  const [editingJob, setEditingJob] = useState(null);
  const navigate = useNavigate();

  /* --- L·∫•y danh s√°ch Job --- */
  const fetchJobs = useCallback(async () => {
    const user = auth.currentUser;
    if (!user) {
      setLoading(false);
      return;
    }

    const companyId = user.uid;

    try {
      // 1Ô∏è‚É£ L·∫•y danh s√°ch job theo c√¥ng ty
      const jobsQuery = query(collection(db, "jobs"), where("companyId", "==", companyId));
      const jobsSnapshot = await getDocs(jobsQuery);

      let jobList = jobsSnapshot.docs.map((docSnap) => ({
        id: docSnap.id,
        ...docSnap.data(),
        applicationsCount: 0,
      }));

      // 2Ô∏è‚É£ L·∫•y s·ªë l∆∞·ª£ng ·ª©ng vi√™n cho t·ª´ng job
      const jobIds = jobList.map((j) => j.id);
      const applicationCounts = await fetchApplicationsCount(jobIds, companyId);

      // 3Ô∏è‚É£ G·∫Øn s·ªë l∆∞·ª£ng ·ª©ng vi√™n v√†o t·ª´ng job
      jobList = jobList.map((job) => ({
        ...job,
        applicationsCount: applicationCounts[job.id] || 0,
      }));

      setJobs(jobList);
    } catch (error) {
      console.error("Error fetching jobs or applications:", error);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchJobs();
  }, [fetchJobs]);

  /* --- X·ª≠ l√Ω x√≥a job --- */
  const handleDelete = async (e, id) => {
    e.stopPropagation();
    const confirm = window.confirm("‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a job n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.");

    if (!confirm) return;
    try {
      await deleteDoc(doc(db, "jobs", id));
      setJobs((prev) => prev.filter((j) => j.id !== id));
    } catch (error) {
      alert("L·ªói khi x√≥a job: " + error.message);
    }
  };

  /* --- Toggle tr·∫°ng th√°i job --- */
  const toggleStatus = async (e, job) => {
    e.stopPropagation();
    try {
      const ref = doc(db, "jobs", job.id);
      await updateDoc(ref, { isActive: !job.isActive });

      setJobs((prev) =>
        prev.map((j) => (j.id === job.id ? { ...j, isActive: !j.isActive } : j))
      );
    } catch (error) {
      alert("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i: " + error.message);
    }
  };

  /* --- Xem danh s√°ch ·ª©ng vi√™n --- */
  const handleViewCandidates = (jobId) => {
    navigate(`/company/home/jobs/${jobId}`);
  };

  /* --- S·ª≠a job --- */
  const handleEditClick = (e, job) => {
    e.stopPropagation();
    setEditingJob(job);
  };

  /* --- L·ªçc job theo tr·∫°ng th√°i --- */
  const filteredJobs =
    filter === "all" ? jobs : jobs.filter((j) => j.isActive === (filter === "active"));

  if (loading) return <p className="manage-loading">ƒêang t·∫£i danh s√°ch c√¥ng vi·ªác...</p>;

  /* ===========================================================
     üîπ Giao di·ªán render
     =========================================================== */
  return (
    <div className="manage-container">
      <h2 className="manage-title">
        Qu·∫£n l√Ω Tin Tuy·ªÉn D·ª•ng ƒê√£ ƒêƒÉng ({jobs.length})
      </h2>

      {/* Toolbar */}
      <div className="manage-toolbar">
        <select
          className="manage-filter"
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
        >
          <option value="all">T·∫•t c·∫£</option>
          <option value="active">ƒêang ho·∫°t ƒë·ªông</option>
          <option value="inactive">ƒê√£ ƒë√≥ng</option>
        </select>

        <button className="btn-new-job" onClick={() => navigate("/company/home/create")}>
          + ƒêƒÉng Tin M·ªõi
        </button>
      </div>

      {/* Danh s√°ch job */}
      {filteredJobs.length === 0 ? (
        <p className="manage-empty">Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác n√†o.</p>
      ) : (
        <div className="manage-grid">
          {filteredJobs.map((job) => (
            <div key={job.id} className="job-card">
              <div className="job-header">
                <h3 className="job-title">{job.title}</h3>
                <span className={`job-status ${job.isActive ? "active" : "inactive"}`}>
                  {job.isActive ? "Active" : "Closed"}
                </span>
              </div>

              <p className="job-desc">
                {job.description?.length > 120
                  ? job.description.slice(0, 120) + "..."
                  : job.description || "No description"}
              </p>

              <div className="job-tags">
                {job.catalog?.slice(0, 3).map((tag, i) => (
                  <span key={i} className="job-tag">
                    {tag}
                  </span>
                ))}
              </div>

              <div className="job-info">
                <p>üí∞ <strong>M·ª©c l∆∞∆°ng:</strong> {job.salaryRange || "Th∆∞∆°ng l∆∞·ª£ng"}</p>
                <p>üìç <strong>ƒê·ªãa ƒëi·ªÉm:</strong> {job.location || "‚Äî"}</p>
                <p>üß† <strong>Kinh nghi·ªám:</strong> {job.experience || "Ch∆∞a x√°c ƒë·ªãnh"}</p>
              </div>

              <div className="job-actions">
                {/* Xem ·ª©ng vi√™n */}
                <button
                  className="btn-view-candidates"
                  onClick={() => handleViewCandidates(job.id)}
                  title="Xem danh s√°ch ·ª©ng vi√™n ƒë√£ n·ªôp ƒë∆°n"
                >
                  <FiUsers size={18} /> Xem ·ª®ng Vi√™n ({job.applicationsCount})
                </button>

                {/* H√†nh ƒë·ªông ph·ª• */}
                <div className="job-secondary-actions">
                  <button
                    className="btn-edit"
                    onClick={(e) => handleEditClick(e, job)}
                    title="Ch·ªânh s·ª≠a chi ti·∫øt"
                  >
                    <FiEdit />
                  </button>

                  <button
                    className="btn-toggle"
                    onClick={(e) => toggleStatus(e, job)}
                    title={job.isActive ? "ƒê√≥ng Job" : "M·ªü l·∫°i Job"}
                  >
                    {job.isActive ? <FiToggleRight /> : <FiToggleLeft />}
                  </button>

                  <button
                    className="btn-delete"
                    onClick={(e) => handleDelete(e, job.id)}
                    title="X√≥a Job"
                  >
                    <FiTrash2 />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Modal ch·ªânh s·ª≠a */}
      {editingJob && (
        <EditJobModal
          job={editingJob}
          onClose={() => setEditingJob(null)}
          onSave={(updated) =>
            setJobs((prev) => prev.map((j) => (j.id === updated.id ? updated : j)))
          }
        />
      )}
    </div>
  );
}

/* ===========================================================
   üîπ COMPONENT PH·ª§: EditJobModal
   =========================================================== */
function EditJobModal({ job, onClose, onSave }) {
  const [form, setForm] = useState({
    title: job.title || "",
    description: job.description || "",
    salaryRange: job.salaryRange || "",
    location: job.location || "",
    experience: job.experience || "",
  });

  const [saving, setSaving] = useState(false);

  const handleChange = (e) => setForm({ ...form, [e.target.name]: e.target.value });

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSaving(true);

    try {
      const ref = doc(db, "jobs", job.id);
      await updateDoc(ref, form);
      onSave({ ...job, ...form });
      onClose();
    } catch (err) {
      alert("‚ùå L·ªói khi c·∫≠p nh·∫≠t job: " + err.message);
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content">
        <h3>Ch·ªânh S·ª≠a C√¥ng Vi·ªác</h3>
        <button className="modal-close-btn" onClick={onClose}>
          &times;
        </button>

        <form onSubmit={handleSubmit}>
          <label>Ti√™u ƒë·ªÅ</label>
          <input
            type="text"
            name="title"
            value={form.title}
            onChange={handleChange}
            placeholder="Ti√™u ƒë·ªÅ c√¥ng vi·ªác"
            required
          />

          <label>M√¥ t·∫£</label>
          <textarea
            name="description"
            rows="4"
            value={form.description}
            onChange={handleChange}
            placeholder="M√¥ t·∫£ chi ti·∫øt"
          />

          <label>M·ª©c l∆∞∆°ng</label>
          <input
            type="text"
            name="salaryRange"
            value={form.salaryRange}
            onChange={handleChange}
            placeholder="M·ª©c l∆∞∆°ng"
          />

          <label>ƒê·ªãa ƒëi·ªÉm</label>
          <input
            type="text"
            name="location"
            value={form.location}
            onChange={handleChange}
            placeholder="ƒê·ªãa ƒëi·ªÉm l√†m vi·ªác"
          />

          <label>Kinh nghi·ªám</label>
          <input
            type="text"
            name="experience"
            value={form.experience}
            onChange={handleChange}
            placeholder="Y√™u c·∫ßu kinh nghi·ªám"
          />

          <div className="modal-actions">
            <button type="button" onClick={onClose} disabled={saving}>
              H·ªßy
            </button>
            <button type="submit" disabled={saving}>
              {saving ? "ƒêang l∆∞u..." : "L∆∞u Thay ƒê·ªïi"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
